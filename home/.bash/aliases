#!/usr/bin/env bash

# re-source all the files again (for when you change an alias etc.)
# NOTE: this won't remove aliases that no longer exist, but it will overwrite.
rsbash()
{
    local currHist="$HISTFILE"
    source ~/.bashrc
    continuehistory "$currHist"
}

# always colour ls
alias ls="ls --color"

# ruby with terminal fix
alias irb="irb --noreadline"

# run a fake smtp server in the command line, spitting out the results to stdout
# (point SmtpClients at 127.0.0.1).
alias fsmtp="python -m smtpd -c DebuggingServer -n localhost:25"

# windows versions mapped to bash
alias cls="clear"
alias dir="ls"

# I clear a lot after 'q'ing out of git diff'ing and then scrolling up... so I
# end up hitting q more than once, and then typing cls...
alias qcls="clear"
alias qqcls="clear"
alias qqcls="clear"
alias qqqcls="clear"
alias qqqqcls="clear"

alias listvars="showvars"

settitle()
{
    echo -e "\033]0;$1\007"
}

showvars()
{
    ( set -o posix ; set ) | less
}

vs()
{
    local args=()
    local version
    local verbose

    while [ "$#" -gt 0 ]; do
      case "$1" in
        -2015) version="15"; shift 1;;
        -2017) version="17"; shift 1;;

        --verbose) verbose="-Verbose"; shift 1;;

        -*) echo "unknown option: $1" >&2; return 1;;
        *) args+=("$1"); shift 1;;
      esac
    done

    local originalPath="${args[0]}"
    # default to current directory
    local path="${args[0]:-.}"

    # Ghetto path expansion (chop up alias, if it exists)
    if [[ ! -z "$originalPath" && ! -d "$path" ]]; then
        aliasResult=$(alias "$originalPath" 2>/dev/null)
        if [[ $? -eq 0 ]]; then
            aliasedPath=${aliasResult#*cd }
            aliasedPath=${aliasedPath%\'}

            # overwrite the argument if the choppy resulted in a valid directory
            # otherwise, try use the original argument as a path
            if [[ -d "$aliasedPath" ]]; then
                path="$aliasedPath"
            fi
        fi
    fi

    if [[ ! -z "$originalPath" && ! ( -d "$path" || -f "$path" ) ]]; then
        echo -e "${BRed}$path is not a valid path${Color_Off}"
        return 1
    fi

    # find solution files in current directory
    IFS=$'\n' solutions=($(find "$path" -maxdepth 1 -type f -name '*.sln'))

    # tries two layers deep (<path>/*.sln and <path>/*/*.sln)
    # this is for directories that embed everything in a "src" folder or similar.
    if [ ${#solutions[@]} -eq 0 ]; then
        IFS=$'\n' solutions=($(find "$path" -maxdepth 2 -type f -name '*.sln'))
    fi

    if [ ${#solutions[@]} -ne 1 ]; then
        echo -e "${BRed}Can't find unique '.sln'${Color_Off}";
        for sln in "${solutions[@]}"
        do
            echo "\"$sln\""
        done
        return 1
    else
        [[ "$verbose" != "" ]] && echo ".sln found: ${solutions[0]}"
        if Test-VisualStudioSolution.ps1 -Path ${solutions[0]} $verbose; then
          echo "Starting solution ${solutions[0]}"
          if [[ "$version" == "15" ]]; then
            [[ "$verbose" != "" ]] && echo start '""' "C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\devenv.exe" "${solutions[0]}"
            start "" "C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\devenv.exe" "${solutions[0]}"
          elif [[ "$version" == "17" ]]; then
            [[ "$verbose" != "" ]] && echo start '""' "C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\Common7\IDE\devenv.exe" "${solutions[0]}"
            start "" "C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\Common7\IDE\devenv.exe" "${solutions[0]}"
          else
            [[ "$verbose" != "" ]] && echo start ${solutions[0]}
            start ${solutions[0]}
          fi
        else
          echo -e "${BRed}Refused to start suspicious looking .sln file ${Color_Off}'${solutions[0]}'"
          return 1
        fi
    fi

    return 0
}

_vs_complete()
{
  local cur=${COMP_WORDS[COMP_CWORD]}

  # we need to do "--" explicitly due to the hack below
  if [[ "$cur" == --* ]]; then
    local ddargs="--verbose"
    COMPREPLY=( $(compgen -W "$ddargs" -- $cur) )
  elif [[ "$cur" == -* ]]; then
    local versions=("-2015" "-2017" "--verbose")

    # Hack to get fuzzy matching
    #   Chop off the dash, which means we can grep from inside the word
    #   instead of requiring the start of the word. This is probably
    #   unexpected/non-standard but it's way more useful to me to be
    #   able to type
    #
    #   > vs -7<tab>
    #
    #   and have that autocomplete to -2017 when there are no other
    #   results that have a 7 in them.
    local search="${cur:1}"
    local matches=$(IFS=$'\n'; echo "${versions[*]}" | \grep -- "$search")

    # Note: We don't include the current value to `compgen`
    #       because we're doing the (fuzzy) matching via `grep` above
    COMPREPLY=( $(compgen -W "$matches") )
  else
    # TODO: include the magic `cd` aliases?
    # TODO: `-o plusdirs` includes '.git' and '.vs' folders...
    COMPREPLY=( $(compgen -o plusdirs -f -X '!*.sln' -- "$cur") )
  fi
}
complete -F _vs_complete vs

edithosts()
{
    powershell -Command "Start-Process 'notepad.exe' -ArgumentList 'C:/Windows/System32/drivers/etc/hosts' -Verb runAs"
}

editaliases()
{
    subl "$HOME/.local_aliases"
}

# source the local aliases if there are any
# These will take precedence over anything defined above
[ -f "$HOME/.local_aliases" ] && source "$HOME/.local_aliases"
